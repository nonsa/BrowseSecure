{
   "apps": {
      "app_launcher": {
         "should_show_apps_page": false
      }
   },
   "browser": {
      "hung_plugin_detect_freq": 2000,
      "last_redirect_origin": "",
      "plugin_message_response_timeout": 25000
   },
   "http_original_content_length": "77557949",
   "http_received_content_length": "77557949",
   "local_state": {
      "multiple_profile_prefs_version": 7
   },
   "ntp": {
      "promo_resource_cache_update": "1434713671.548113"
   },
   "plugins": {
      "metadata": {
         "adobe-flash-player": {
            "displayurl": true,
            "group_name_matcher": "*Shockwave Flash*",
            "help_url": "https://support.google.com/chrome/?p=plugin_flash",
            "lang": "en-US",
            "mime_types": [ "application/futuresplash", "application/x-shockwave-flash" ],
            "name": "Adobe Flash Player",
            "url": "http://get.adobe.com/flashplayer/",
            "versions": [ {
               "reference": "http://www.adobe.com/support/security/bulletins/apsb12-03.html",
               "status": "up_to_date",
               "version": "11.1.102"
            } ]
         },
         "adobe-reader": {
            "group_name_matcher": "*Adobe Acrobat*",
            "help_url": "https://support.google.com/chrome/?p=plugin_pdf",
            "lang": "en-US",
            "mime_types": [ "application/pdf", "application/vnd.adobe.x-mars", "application/vnd.adobe.xdp+xml", "application/vnd.adobe.xfd+xml", "application/vnd.adobe.xfdf", "application/vnd.fdf" ],
            "name": "Adobe Reader",
            "url": "http://ardownload.adobe.com/pub/adobe/reader/win/11.x/11.0.01/en_US/AdbeRdr11001_en_US.exe",
            "versions": [ {
               "reference": "http://www.adobe.com/support/security/bulletins/apsb13-02.html",
               "status": "requires_authorization",
               "version": "9.5.3"
            }, {
               "status": "out_of_date",
               "version": "10"
            }, {
               "reference": "http://www.adobe.com/support/security/bulletins/apsb13-02.html",
               "status": "requires_authorization",
               "version": "10.1.5"
            }, {
               "status": "out_of_date",
               "version": "11"
            }, {
               "reference": "http://www.adobe.com/support/security/bulletins/apsb13-02.html",
               "status": "up_to_date",
               "version": "11.0.1"
            } ]
         },
         "adobe-shockwave": {
            "group_name_matcher": "*Shockwave for Director*",
            "help_url": "https://support.google.com/chrome/?p=plugin_shockwave",
            "lang": "en-US",
            "mime_types": [ "application/x-director" ],
            "name": "Adobe Shockwave Player",
            "url": "http://fpdownload.macromedia.com/get/shockwave/default/english/win95nt/latest/Shockwave_Installer_Slim.exe",
            "versions": [ {
               "reference": "http://www.adobe.com/support/security/bulletins/apsb12-23.html",
               "status": "requires_authorization",
               "version": "11.6.8.638"
            } ]
         },
         "apple-quicktime": {
            "group_name_matcher": "*QuickTime Plug-in*",
            "help_url": "https://support.google.com/chrome/?p=plugin_quicktime",
            "lang": "en-US",
            "mime_types": [ "application/sdp", "application/x-mpeg", "application/x-rtsp", "application/x-sdp", "audio/3ggp", "audio/3ggp2", "audio/aac", "audio/ac3", "audio/aiff", "audio/amr", "audio/basic", "audio/mid", "audio/midi", "audio/mp4", "audio/mpeg", "audio/vnd.qcelp", "audio/wav", "audio/x-aac", "audio/x-ac3", "audio/x-aiff", "audio/x-caf", "audio/x-gsm", "audio/x-m4a", "audio/x-m4b", "audio/x-m4p", "audio/x-midi", "audio/x-mpeg", "audio/x-wav", "image/jp2", "image/jpeg2000", "image/jpeg2000-image", "image/pict", "image/png", "image/x-jpeg2000-image", "image/x-macpaint", "image/x-pict", "image/x-png", "image/x-quicktime", "image/x-sgi", "image/x-targa", "video/3ggp", "video/3ggp2", "video/flc", "video/mp4", "video/mpeg", "video/quicktime", "video/sd-video", "video/x-m4v", "video/x-mpeg" ],
            "name": "QuickTime Player",
            "url": "http://appldnld.apple.com/QuickTime/041-3089.20111026.Sxpr4/QuickTimeInstaller.exe",
            "versions": [ {
               "status": "requires_authorization",
               "version": "7.6.9"
            } ]
         },
         "divx-player": {
            "group_name_matcher": "*DivX Web Player*",
            "help_url": "https://support.google.com/chrome/?p=plugin_divx",
            "lang": "en-US",
            "mime_types": [ "video/divx", "video/x-matroska" ],
            "name": "DivX Web Player",
            "url": "http://download.divx.com/player/divxdotcom/DivXWebPlayerInstaller.exe",
            "versions": [ {
               "status": "requires_authorization",
               "version": "1.4.3.4"
            } ]
         },
         "google-chrome-pdf": {
            "group_name_matcher": "*Chrome PDF Viewer*",
            "name": "Chrome PDF Viewer",
            "versions": [ {
               "comment": "Chrome PDF Viewer has no version information.",
               "status": "up_to_date",
               "version": "0"
            } ]
         },
         "google-talk": {
            "group_name_matcher": "*Google Talk*",
            "name": "Google Talk",
            "versions": [ {
               "comment": "'Google Talk Plugin' and 'Google Talk Plugin Video Accelerator' use two completely different versioning schemes, so we can't define a minimum version.",
               "status": "up_to_date",
               "version": "0"
            } ]
         },
         "ibm-java-runtime-environment": {
            "group_name_matcher": "*IBM*Java*",
            "mime_types": [ "application/x-java-applet", "application/x-java-applet;jpi-version=1.7.0_05", "application/x-java-applet;version=1.1", "application/x-java-applet;version=1.1.1", "application/x-java-applet;version=1.1.2", "application/x-java-applet;version=1.1.3", "application/x-java-applet;version=1.2", "application/x-java-applet;version=1.2.1", "application/x-java-applet;version=1.2.2", "application/x-java-applet;version=1.3", "application/x-java-applet;version=1.3.1", "application/x-java-applet;version=1.4", "application/x-java-applet;version=1.4.1", "application/x-java-applet;version=1.4.2", "application/x-java-applet;version=1.5", "application/x-java-applet;version=1.6", "application/x-java-applet;version=1.7", "application/x-java-bean", "application/x-java-bean;jpi-version=1.7.0_05", "application/x-java-bean;version=1.1", "application/x-java-bean;version=1.1.1", "application/x-java-bean;version=1.1.2", "application/x-java-bean;version=1.1.3", "application/x-java-bean;version=1.2", "application/x-java-bean;version=1.2.1", "application/x-java-bean;version=1.2.2", "application/x-java-bean;version=1.3", "application/x-java-bean;version=1.3.1", "application/x-java-bean;version=1.4", "application/x-java-bean;version=1.4.1", "application/x-java-bean;version=1.4.2", "application/x-java-bean;version=1.5", "application/x-java-bean;version=1.6", "application/x-java-bean;version=1.7", "application/x-java-vm", "application/x-java-vm-npruntime" ],
            "name": "IBM Java"
         },
         "java-runtime-environment": {
            "displayurl": true,
            "group_name_matcher": "Java*",
            "help_url": "https://support.google.com/chrome/?p=plugin_java",
            "lang": "en-US",
            "mime_types": [ "application/x-java-applet", "application/x-java-applet;jpi-version=1.7.0_05", "application/x-java-applet;version=1.1", "application/x-java-applet;version=1.1.1", "application/x-java-applet;version=1.1.2", "application/x-java-applet;version=1.1.3", "application/x-java-applet;version=1.2", "application/x-java-applet;version=1.2.1", "application/x-java-applet;version=1.2.2", "application/x-java-applet;version=1.3", "application/x-java-applet;version=1.3.1", "application/x-java-applet;version=1.4", "application/x-java-applet;version=1.4.1", "application/x-java-applet;version=1.4.2", "application/x-java-applet;version=1.5", "application/x-java-applet;version=1.6", "application/x-java-applet;version=1.7", "application/x-java-bean", "application/x-java-bean;jpi-version=1.7.0_05", "application/x-java-bean;version=1.1", "application/x-java-bean;version=1.1.1", "application/x-java-bean;version=1.1.2", "application/x-java-bean;version=1.1.3", "application/x-java-bean;version=1.2", "application/x-java-bean;version=1.2.1", "application/x-java-bean;version=1.2.2", "application/x-java-bean;version=1.3", "application/x-java-bean;version=1.3.1", "application/x-java-bean;version=1.4", "application/x-java-bean;version=1.4.1", "application/x-java-bean;version=1.4.2", "application/x-java-bean;version=1.5", "application/x-java-bean;version=1.6", "application/x-java-bean;version=1.7", "application/x-java-vm", "application/x-java-vm-npruntime" ],
            "name": "Java(TM)",
            "url": "http://java.com/download",
            "versions": [ {
               "comment": "Java SE 6 Update 39. '390' is not a typo.",
               "status": "requires_authorization",
               "version": "6.0.390"
            }, {
               "status": "out_of_date",
               "version": "7"
            }, {
               "comment": "Java SE 7u13",
               "status": "requires_authorization",
               "version": "10.13"
            } ]
         },
         "microsoft-office": {
            "group_name_matcher": "*Microsoft Office*",
            "name": "Microsoft Office",
            "versions": [ {
               "comment": "Microsoft Office has no version information.",
               "status": "requires_authorization",
               "version": "0"
            } ]
         },
         "nvidia-3d": {
            "group_name_matcher": "*NVIDIA 3D*",
            "name": "NVIDIA 3D",
            "versions": [ {
               "comment": "NVidia 3D has no version information.",
               "status": "requires_authorization",
               "version": "0"
            } ]
         },
         "realplayer": {
            "group_name_matcher": "*RealPlayer*",
            "help_url": "https://support.google.com/chrome/?p=plugin_real",
            "lang": "en-US",
            "mime_types": [ "audio/vnd.rn-realaudio", "video/vnd.rn-realvideo", "audio/x-pn-realaudio-plugin", "audio/x-pn-realaudio" ],
            "name": "RealPlayer",
            "url": "http://forms.real.com/real/realone/download.html?type=rpsp_us",
            "versions": [ {
               "reference": "http://service.real.com/realplayer/security/02062012_player/en/",
               "status": "requires_authorization",
               "version": "15.0.2.71"
            } ]
         },
         "silverlight": {
            "group_name_matcher": "*Silverlight*",
            "lang": "en-US",
            "mime_types": [ "application/x-silverlight", "application/x-silverlight-2" ],
            "name": "Silverlight",
            "url": "http://go.microsoft.com/fwlink/?LinkID=149156",
            "versions": [ {
               "reference": "http://support.microsoft.com/kb/2690729",
               "status": "up_to_date",
               "version": "4.1.10329.0"
            }, {
               "status": "out_of_date",
               "version": "5"
            }, {
               "reference": "http://support.microsoft.com/kb/2636927",
               "status": "up_to_date",
               "version": "5.1.10411.0"
            } ]
         },
         "windows-media-player": {
            "displayurl": true,
            "group_name_matcher": "*Windows Media Player*",
            "help_url": "https://support.google.com/chrome/?p=plugin_wmp",
            "lang": "en-US",
            "mime_types": [ "application/asx", "application/x-mplayer2", "application/x-ms-wmp", "audio/x-ms-wax", "audio/x-ms-wma", "video/x-ms-asf", "video/x-ms-asf-plugin", "video/x-ms-wm", "video/x-ms-wmv", "video/x-ms-wvx" ],
            "name": "Windows Media Player",
            "url": "http://www.interoperabilitybridges.com/wmp-extension-for-chrome"
         }
      },
      "resource_cache_update": "1434713726.547113"
   },
   "policy": {
      "last_statistics_update": "13079187266545239"
   },
   "profile": {
      "info_cache": {
         "Default": {
            "avatar_icon": "chrome://theme/IDR_PROFILE_AVATAR_0",
            "background_apps": false,
            "is_managed": false,
            "name": "Erster Nutzer",
            "user_name": ""
         }
      },
      "last_used": "Default"
   },
   "shutdown": {
      "num_processes": 7,
      "num_processes_slow": 0,
      "type": 1
   },
   "uninstall_metrics": {
      "installation_date2": "1369203942",
      "launch_count": "24"
   },
   "user_experience_metrics": {
      "low_entropy_source": 813,
      "session_id": 23,
      "stability": {
         "breakpad_registration_fail": 0,
         "breakpad_registration_ok": 0,
         "crash_count": 1,
         "debugger_not_present": 24,
         "debugger_present": 0,
         "exited_cleanly": true,
         "incomplete_session_end_count": 0,
         "last_timestamp_sec": "1434714083",
         "launch_count": 24,
         "launch_time_sec": "1434713913",
         "page_load_count": 0,
         "plugin_stats2": [ {
            "crashes": 0,
            "instances": 0,
            "launches": 11,
            "loading_errors": 0,
            "name": "Shockwave Flash"
         }, {
            "crashes": 0,
            "instances": 2,
            "launches": 1,
            "loading_errors": 0,
            "name": "Mixesoft Click&Clean Plug-In"
         } ],
         "renderer_crash_count": 0,
         "renderer_hang_count": 0,
         "session_end_completed": true,
         "stats_buildtime": "1368787978",
         "stats_version": "27.0.1453.93"
      }
   },
   "variations_last_fetch_time": "13079187516462496",
   "variations_seed": "",
   "variations_seed_date": "13079187277000000",
   "was": {
      "restarted": false
   }
}
